#!/usr/bin/env python2
# -*- coding:utf-8 -*-

"""Build a file of words (one word per line) that a set of Hunspell files
(:file:`.aff` and :file:`.dic`) accept.

Performance
===========

This script is much slower than Hunspell’s `unmunch`_ or `unmunch.sh`_.
Instead, it focuses on accuracy and maintainability (the source code is easy to
read, being Python).

If Hunspell’s existing solutions work for you, you are encouraged to use them
instead of using this script; that will save you time. However, you might want
to compare the output of Hunspell’s tools with the output of this script, just
in case Hunspell’s solutions are not working properly for your Hunspell files
and you simply did not notice yet.

.. _unmunch: http://hunspell.cvs.sourceforge.net/viewvc/hunspell/hunspell/src/\
tools/unmunch.c?view=markup
.. _unmunch.sh: http://sf.net/projects/hunspell/files/Hunspell/1.2.8/unmunch.sh


Uncomplete Implementation
=========================

This script was coded for a specific set of two files, and not all features
of Hunspell were implemented. Missing features are, for example, support
for letter flags, for prefixes or for compound rules (compound rules
without * or + in them could be supported in theory). UTF-8 encoding is
assumed (and checked, the script stops for other encodings).

This script is also meant to run on files generated by the build tool of
this repository, which implies that single spacing is used, there are no
empty lines and there are no source comments.

However, I’m open to implement any feature that you need, including
corner-case features that would need to be optional (enabled through
command-line switches). Feel free to `ask for whatever you need`_.

.. _ask for whatever you need: https://github.com/eitsl/hunspell/issues


Syntax
======

To unmunch a set of Hunspell files, use the following syntax:

.. code:: bash

    python utils/unmunch.py -a <.aff file> -d <.dic file> [options]

The result is printed on the standard output. You may also specify an output
file:

.. code:: bash

    python utils/unmunch.py -a <.aff file> -d <.dic file> -o <output file> \
[options]

Finally, you can use the following command to get extended command-line help
for this script:

.. code:: bash

    python utils/utils.py -h


Options
=======

-a FILE, --aff=FILE
        Affixes (:file:`.aff`) file.

-d FILE, --dic=FILE
        Dictionary (:file:`.dic`) file.

-o FILE, --output=FILE
        Path to the output file. If you omit this parameter, the results are
        printed on the standard output.

-h, --help
        Shows this command-line help. Any other option is ignored.
"""

import codecs
from getopt import getopt, GetoptError
from os import path
import re
import sys


def _root_dir():
    return path.join(path.dirname(__file__), "..")


def _external_dir():
    return path.join(_root_dir(), "external")


sys.path.append(path.join(_external_dir(), "pydiomatic"))
from idiomatic.ui import \
    warn_about_option_overwrite


class _Unmuncher(object):

    def __init__(self, aff_path, dic_path, output_path=None):

        # Input.
        self.aff_path = aff_path
        self.dic_path = dic_path
        self.output_path = output_path
        if output_path:
            open(output_path, "w").close()
            self.out = codecs.open(output_path, "a", "utf-8")
        else:
            from sys import stdout
            self.out = stdout

        # Rules.
        self.needaffix_flag = None
        self.keepcase_flag = None

        self.sfx_countdown = False
        self.current_flag = None
        self.sfx_rules = {}

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        if self.output_path:
            self.out.close()

    def output(self, word):
        self.out.write(word + "\n")

    def read_aff(self):
        with codecs.open(self.aff_path, "r", "utf-8") as fp:
            for line in fp:
                if line.startswith(u"SFX "):
                    if self.sfx_countdown:
                        parts = line.split()
                        old, new, rule = parts[2:5]
                        if old == u"0":
                            old = 0
                        else:
                            old = len(old)
                        rule = re.compile(rule + u"$")
                        self.sfx_rules[self.current_flag].append(
                            (old, new, rule))
                        self.sfx_countdown -= 1
                    else:
                        sfx, flag, cross_product, rule_count = line.split()
                        self.current_flag = flag
                        self.sfx_rules[flag] = []
                        self.sfx_countdown = int(rule_count)
                if line.startswith(u"SET ") and \
                        not line.startswith(u"SET UTF-8"):
                    raise NotImplementedError(
                        u"Only UTF-8 files are currently supported")
                if line.startswith(u"FLAG ") and \
                        not line.startswith(u"FLAG num"):
                    raise NotImplementedError(
                        u"Only numeric flags are currently supported")
                if line.startswith(u"NEEDAFFIX "):
                    self.needaffix_flag = line[10:].rstrip()
                if line.startswith(u"KEEPCASE "):
                    self.keepcase_flag = line[9:].rstrip()

    def apply_suffix(self, lemma, suffix):
        if u"/" in suffix:
            suffix, flags = suffix.split(u"/")
            lemma += suffix
            flags = flags.split(u",")
            if self.keepcase_flag in flags:
                flags.remove(self.keepcase_flag)
            if self.needaffix_flag in flags:
                flags.remove(self.needaffix_flag)
            else:
                self.output(lemma)
            for flag in flags:
                for old, new, rule in self.sfx_rules[flag]:
                    if rule.search(lemma):
                        new_lemma = lemma
                        if old:
                            new_lemma = lemma[:-old]
                        self.apply_suffix(new_lemma, new)
        else:
            self.output(lemma + suffix)


    def read_dic(self):
        with codecs.open(self.dic_path, "r", "utf-8") as fp:
            next(fp)  # Skip first line.
            for line in fp:
                line = line.split(u" ")[0]
                self.apply_suffix(u"", line)

    def run(self):
        self.read_aff()
        self.read_dic()


def _main(argv):

    try:
        options, arguments = getopt(argv, "a:d:ho:",
                                    ["aff=", "dic=", "help", "output="])
    except GetoptError as error:
        print(error)
        sys.exit(2)

    aff_path = None
    dic_path = None
    output_path = None

    for option, value in options:
        value = value.decode("utf-8")
        if option in ("-a", "--aff"):
            if aff_path:
                warn_about_option_overwrite(option=option,
                                            previous_value=aff_path,
                                            new_value=value)
            aff_path = value
        elif option in ("-d", "--dic"):
            if dic_path:
                warn_about_option_overwrite(option=option,
                                            previous_value=dic_path,
                                            new_value=value)
            dic_path = value
        elif option in ("-o", "--output"):
            if output_path:
                warn_about_option_overwrite(option=option,
                                            previous_value=output_path,
                                            new_value=value)
            output_path = value
        elif option in ("-h", "--help"):
            print(__doc__)
            sys.exit()
        else:
            print(u"Error: unexpected option: ‘{}’. "
                  u"Use ‘-h’ for help.".format(option))
            sys.exit(2)

    if not aff_path:
        print(u"You must specify an ‘.aff’ file "
              u"using the ‘-a’ command-line switch.")
        sys.exit(2)
    aff_path = path.abspath(aff_path)

    if not dic_path:
        print(u"You must specify a ‘.dic’ file "
              u"using the ‘-d’ command-line switch.")
        sys.exit(2)
    dic_path = path.abspath(dic_path)

    if output_path:
        output_path = path.abspath(output_path)

    with _Unmuncher(aff_path=aff_path, dic_path=dic_path,
                    output_path=output_path) as unmuncher:
        unmuncher.run()


if __name__ == "__main__":
    _main(sys.argv[1:])
